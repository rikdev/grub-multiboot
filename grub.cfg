insmod regexp

function show_message {
  echo "$1"
  sleep --interruptible 5
}

function add_directory_submenu {
  set menu_entry_creator="$1"
  set image_directory="$2"

  for image_path in ${image_directory}/*; do
    regexp --set image_name '.*/([^/]*)$' "${image_path}"
    if [ -d "${image_path}" ]; then
      submenu "${image_name} >" "${menu_entry_creator}" "${image_path}" {
        add_directory_submenu "$2" "$3"
      }
    elif [ -f "${image_path}" ]; then
      ${menu_entry_creator} "${image_name}" "${image_path}"
    fi
  done
}

function add_image_menuentry {
  set image_name="$1"
  set image_path="$2"

  regexp --set dist_name '([^-]+)' "${image_name}"
  menuentry "${image_name}" "${image_path}" --class "${dist_name}" {
    set iso_path="$2"
    echo "Booting image: (${root})${iso_path}"
    loopback loop "${iso_path}"

    if [ -f (loop)/boot/grub/loopback.cfg ]; then
      echo 'Starting "loopback.cfg" script...'
      set old_root="${root}"
      set root=(loop)
      export iso_path
      configfile /boot/grub/loopback.cfg
      set root="${old_root}"
    elif [ -f (loop)/arch/boot/x86_64/archiso.img ]; then
      echo 'Starting "Arch Linux" boot script...'
      # https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Arch_Linux_monthly_release
      probe --fs-uuid "${root}" --set=root_uuid
      set img_dev_path="/dev/disk/by-uuid/${root_uuid}"
      linux (loop)/arch/boot/x86_64/vmlinuz img_dev="${img_dev_path}" img_loop="${iso_path}" earlymodules=loop
      initrd (loop)/arch/boot/intel_ucode.img (loop)/arch/boot/amd_ucode.img (loop)/arch/boot/x86_64/archiso.img
    elif [ ( -f (loop)/isolinux/vmlinuz ) -a ( -f (loop)/isolinux/initrd.img ) ]; then
      echo 'Starting RHEL-based distribution boot script...'
      probe --set iso_label --label (loop)
      linux (loop)/isolinux/vmlinuz root=live:CDLABEL="${iso_label}" rd.live.image iso-scan/filename="${iso_path}"
      initrd (loop)/isolinux/initrd.img
    elif [ ( -f (loop)/boot/*/loader/linux ) -a ( -f (loop)/boot/*/loader/initrd ) ]; then
      if [ -f (loop)/boot/grub2/grub.cfg ]; then
        echo 'Starting "openSUSE Rescue LiveCD" boot script...'
        probe --set iso_label --label (loop)
        linux (loop)/boot/*/loader/linux root=live:CDLABEL="${iso_label}" rd.live.image iso-scan/filename="${iso_path}"
      else
        echo 'Starting "openSUSE" boot script...'
        linux (loop)/boot/*/loader/linux install=hd:"${iso_path}" systemboot=1
      fi
      initrd (loop)/boot/*/loader/initrd
    elif [ ( -f (loop)/boot/grub/k-x86* ) -a ( -f (loop)/boot/grub/initrd.xz ) ]; then
      echo 'Starting "Kaspersky Rescue Disk" boot script...'
      set kernel_postfix=''
      if cpuid -l; then set kernel_postfix=_64; fi
      # WARNING: add "data" directory to root of this volume
      linux "(loop)/boot/grub/k-x86${kernel_postfix}" dostartx isoloop="..${iso_path}"
      initrd (loop)/boot/grub/initrd.xz
    elif [ -d (loop)/sysresccd ]; then
      echo 'Starting "SystemRescueCD" boot script...'
      probe --fs-uuid "${root}" --set=root_uuid
      set img_dev_path="/dev/disk/by-uuid/${root_uuid}"
      linux (loop)/sysresccd/boot/*/vmlinuz img_dev="${img_dev_path}" img_loop="${iso_path}" earlymodules=loop archisobasedir=sysresccd
      initrd (loop)/sysresccd/boot/intel_ucode.img (loop)/sysresccd/boot/amd_ucode.img (loop)/sysresccd/boot/*/sysresccd.img
    elif [ ( -f (loop)/boot/kernel/kernel ) -a ( -f (loop)/boot/loader ) ]; then
      echo 'Starting "FreeBSD" boot script...'
      kfreebsd (loop)/boot/kernel/kernel
      kfreebsd_module "${iso_path}" type=mfs_root
      set kFreeBSD.vfs.root.mountfrom=cd9660:/dev/md0
    elif [ -f (loop)/netbsd ]; then
      echo 'Starting "NetBSD" boot script...'
      knetbsd (loop)/netbsd
      knetbsd_module_elf (loop)/*/installation/miniroot/miniroot.kmod
    elif [ -f (loop)/isolinux/memtest ]; then
      echo 'Starting "MemTest86" boot script...'
      if [ "${grub_platform}" == pc ]; then
        linux16 (loop)/isolinux/memtest
      else
        show_message "This version of \"MemTest86\" program doesn't support ${grub_platform} mode."
      fi
    else
      show_message 'Error: cannot find rule to boot the image.'
    fi
  }
}

function add_application_menuentry {
  set application_name="$1"
  set application_path="$2"

  menuentry "${application_name}" "${application_path}" --class application {
    chainloader "$2"
  }
}

# ISO images

submenu 'Boot images >' {
  add_directory_submenu add_image_menuentry /boot/images
}

# UEFI applications

if [ "${grub_platform}" == 'efi' ]; then
  submenu 'UEFI applications >' {
    add_directory_submenu add_application_menuentry /boot/applications
  }
fi

# Windows Boot Manager

set windows_directory=/boot/windows
if [ "${grub_platform}" == 'efi' ]; then
  set bootmgr_path="${windows_directory}/EFI/Boot/bootx64.efi"
  if [ -f "${bootmgr_path}" ]; then
    menuentry 'Windows Boot Manager' --class windows {
      chainloader "${bootmgr_path}"
    }
  fi
else
  set bootmgr_path="${windows_directory}/bootmgr"
  if [  -f "${bootmgr_path}" ]; then
    menuentry 'Windows Boot Manager' --class windows {
      insmod ntldr
      ntldr "${bootmgr_path}"
    }
  fi
fi

# Power management

menuentry 'System shutdown' --class system {
  echo 'System shutting down...'
  halt
}
menuentry 'System restart' --class system {
  echo 'System rebooting...'
  reboot
}
