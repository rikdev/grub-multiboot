insmod regexp

function add_directory_submenu {
  set menu_entry_creator="$1"
  set image_directory="$2"

  for image_path in ${image_directory}/*; do
    regexp --set image_name '.*/([^/]*)$' "${image_path}"
    if [ -d "${image_path}" ]; then
      submenu "${image_name} >" "${menu_entry_creator}" "${image_path}" {
        add_directory_submenu "$2" "$3"
      }
    elif [ -f "${image_path}" ]; then
      ${menu_entry_creator} "${image_name}" "${image_path}"
    fi
  done
}

function add_image_menuentry {
  set image_name="$1"
  set image_path="$2"

  regexp --set dist_name '([^-]+)' "${image_name}"
  menuentry "${image_name}" "${image_path}" --class "${dist_name}" {
    set iso_path="$2"
    echo "Booting image: (${root})${iso_path}"
    loopback loop "${iso_path}"

    if [ -f (loop)/boot/grub/loopback.cfg ]; then
      set old_root="${root}"
      set root=(loop)
      export iso_path
      configfile /boot/grub/loopback.cfg
      set root="${old_root}"
    elif [ -f (loop)/arch/boot/x86_64/archiso.img ]; then
      # https://wiki.archlinux.org/index.php/Multiboot_USB_drive#Arch_Linux_monthly_release
      probe --fs-uuid "${root}" --set=root_uuid
      set img_dev_path="/dev/disk/by-uuid/${root_uuid}"
      linux (loop)/arch/boot/x86_64/vmlinuz img_dev="${img_dev_path}" img_loop="${iso_path}" earlymodules=loop
      initrd (loop)/arch/boot/intel_ucode.img (loop)/arch/boot/amd_ucode.img (loop)/arch/boot/x86_64/archiso.img
    elif [ ( -f (loop)/isolinux/vmlinuz ) -a ( -f (loop)/isolinux/initrd.img ) ]; then
      # RHEL-based distribution
      probe --set iso_label --label (loop)
      linux (loop)/isolinux/vmlinuz root=live:CDLABEL="${iso_label}" rd.live.image iso-scan/filename="${iso_path}"
      initrd (loop)/isolinux/initrd.img
    else
      echo 'Error: cannot find rule to boot the image.'
      sleep --interruptible 5
    fi
  }
}

function add_application_menuentry {
  set application_name="$1"
  set application_path="$2"

  menuentry "${application_name}" "${application_path}" --class application {
    chainloader "$2"
  }
}

# ISO images

submenu 'Boot images >' {
  add_directory_submenu add_image_menuentry /boot/images
}

# UEFI applications

if [ "${grub_platform}" == 'efi' ]; then
  submenu 'UEFI applications >' {
    add_directory_submenu add_application_menuentry /boot/applications
  }
fi

# Windows Boot Manager

set windows_directory=/boot/windows
if [ "${grub_platform}" == 'efi' ]; then
  set bootmgr_path="${windows_directory}/EFI/Boot/bootx64.efi"
  if [ -f "${bootmgr_path}" ]; then
    menuentry 'Windows Boot Manager' --class windows {
      chainloader "${bootmgr_path}"
    }
  fi
else
  set bootmgr_path="${windows_directory}/bootmgr"
  if [  -f "${bootmgr_path}" ]; then
    menuentry 'Windows Boot Manager' --class windows {
      insmod ntldr
      ntldr "${bootmgr_path}"
    }
  fi
fi

# Power management

menuentry 'System shutdown' --class system {
  echo 'System shutting down...'
  halt
}
menuentry 'System restart' --class system {
  echo 'System rebooting...'
  reboot
}
